//-----------------------------------------------------------------------------
// File : EditorMaterial.h
// Desc : Material For Editor.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <d3d11.h>
#include <d3d11shader.h>
#include <tinyxml2.h>
#include <string>
#include <vector>
#include <map>
#include <asdxRef.h>
#include <asdxEditParam.h>
#include <PluginMgr.h>
#include <imgui.h>
#include <ExportContext.h>
#include <FxParser.h>


///////////////////////////////////////////////////////////////////////////////
// EditMaterialParameter structure
///////////////////////////////////////////////////////////////////////////////
struct EditMaterialParameter
{
    asura::PROPERTY_TYPE    Type;       //!< プロパティタイプ.
    std::string             Label;      //!< 表示ラベル名.
    union Param
    {
        asdx::EditBool*     pBool;
        asdx::EditInt*      pInt;
        asdx::EditFloat*    pFloat;
        asdx::EditFloat2*   pFloat2;
        asdx::EditFloat3*   pFloat3;
        asdx::EditFloat4*   pFloat4;
        asdx::EditColor3*   pColor3;
        asdx::EditColor4*   pColor4;
    } Param;
    struct Slider
    {
        float   Min;        //!< 最小値.
        float   Max;        //!< 最大値.
        float   Step;       //!< 刻み幅.
    } Slider;
    uint32_t                Offset;

    void Draw();
    void CopyTo(uint8_t* head) const;
    void Dispose();
    void Deserialize(tinyxml2::XMLElement* element);
    tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc);
};

///////////////////////////////////////////////////////////////////////////////
// EditMaterialTexture structure
///////////////////////////////////////////////////////////////////////////////
struct EditMaterialTexture
{
    std::string             Name;
    std::string             Label;
    asdx::EditTexture2D     Texture;
    DEFAULT_TEXTURE_TYPE    DefaultValue;

    void Draw();
    ID3D11ShaderResourceView* GetSRV() const;
    void Deserialize(tinyxml2::XMLElement* element);
    tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc);
};


///////////////////////////////////////////////////////////////////////////////
// EditMaterialView class
///////////////////////////////////////////////////////////////////////////////
class EditMaterialView
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      生成処理を行います.
    //-------------------------------------------------------------------------
    static EditMaterialView* Create(const asura::Properties& props);

    //-------------------------------------------------------------------------
    //! @brief      再生成を行います.
    //-------------------------------------------------------------------------
    static EditMaterialView* Recreate(const asura::Properties& props, EditMaterialView* pView);

    //-------------------------------------------------------------------------
    //! @brief      破棄処理を行います.
    //-------------------------------------------------------------------------
    static void Dispose(EditMaterialView*& pView);

    //-------------------------------------------------------------------------
    //! @brief      シリアライズします.
    //-------------------------------------------------------------------------
    tinyxml2::XMLElement* Serialize(const char* tag, tinyxml2::XMLDocument* doc);

    //-------------------------------------------------------------------------
    //! @brief      デシリアライズします.
    //-------------------------------------------------------------------------
    void Deserialize(const char* tag, tinyxml2::XMLElement* element);

    //-------------------------------------------------------------------------
    //! @brief      描画処理を行います.
    //-------------------------------------------------------------------------
    void Draw();

    void UpdateBuffer(uint8_t* head);

    void SetTextures(ID3D11DeviceContext* pContext, const PluginShader* pShader);

    //-------------------------------------------------------------------------
    //! @brief      キャストシャドウフラグを取得します.
    //-------------------------------------------------------------------------
    bool CastShadow() const;

    //-------------------------------------------------------------------------
    //! @brief      レシーブシャドウフラグを取得します.
    //-------------------------------------------------------------------------
    bool ReceiveShadow() const;

    //-------------------------------------------------------------------------
    //! @brief      ブレンドステートを取得します.
    //-------------------------------------------------------------------------
    int GetBlendState() const;

    //-------------------------------------------------------------------------
    //! @brief      ラスタライザーステートを取得します.
    //-------------------------------------------------------------------------
    int GetRasterizerState() const;

    //-------------------------------------------------------------------------
    //! @brief      深度ステートを取得します.
    //-------------------------------------------------------------------------
    int GetDepthState() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::EditBool                      m_ShadowCast;
    asdx::EditBool                      m_ShadowReceive;
    asdx::EditInt                       m_BlendState;
    asdx::EditInt                       m_RasterizerState;
    asdx::EditInt                       m_DepthState;
    std::vector<EditMaterialParameter>  m_Params;
    std::vector<EditMaterialTexture>    m_Textures;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// EditorMaterial
///////////////////////////////////////////////////////////////////////////////
class EditorMaterial
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    EditorMaterial();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~EditorMaterial();

    //-------------------------------------------------------------------------
    //! @brief      シリアライズします.
    //-------------------------------------------------------------------------
    tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc);

    //-------------------------------------------------------------------------
    //! @brief      デシリアライズします.
    //-------------------------------------------------------------------------
    void Deserialize(tinyxml2::XMLElement* element);

    //-------------------------------------------------------------------------
    //! @brief      マテリアルシェーダを適用します.
    //-------------------------------------------------------------------------
    const PluginShader* Bind(ID3D11DeviceContext* pContext, bool lightingPass);

    //-------------------------------------------------------------------------
    //! @brief      マテリアルシェーダの適用を解除します.
    //-------------------------------------------------------------------------
    void Unbind(ID3D11DeviceContext* pContext, const PluginShader* shader);

    //-------------------------------------------------------------------------
    //! @brief      編集処理を行います.
    //-------------------------------------------------------------------------
    void Edit(const std::string& filterType);

    //-------------------------------------------------------------------------
    //! @brief      マテリアル名を設定します.
    //-------------------------------------------------------------------------
    void SetName(const std::string& name);

    //-------------------------------------------------------------------------
    //! @brief      マテリアル名を取得します.
    //-------------------------------------------------------------------------
    const std::string& GetName() const;

    //-------------------------------------------------------------------------
    //! @brief      シャドウキャストフラグを取得します.
    //-------------------------------------------------------------------------
    bool CastShadow() const;

    //-------------------------------------------------------------------------
    //! @brief      ブレンドステートを取得します.
    //-------------------------------------------------------------------------
    int GetBlendState() const;

    ////-------------------------------------------------------------------------
    ////! @brief      エクスポートデータを生成します.
    ////-------------------------------------------------------------------------
    //void CreateExportData(ExportMaterial* dst);

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    std::string                                 m_Name;                 //!< マテリアル名.
    std::string                                 m_SelectedMaterial;     //!< 選択されているマテリアルシェーダ名.
    std::map<std::string, EditMaterialView*>    m_EditViews;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// EditorMaterials class
///////////////////////////////////////////////////////////////////////////////
class EditorMaterials
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    ImGuiTextFilter     NameFilter;         // 名前フィルタ.
    std::string         TypeFilter = "";    // マテリアルタイプフィルタ.

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    EditorMaterials();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~EditorMaterials();

    //-------------------------------------------------------------------------
    //! @brief      シリアライズします.
    //-------------------------------------------------------------------------
    tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc);

    //-------------------------------------------------------------------------
    //! @brief      デシリアライズします.
    //-------------------------------------------------------------------------
    void Deserialize(tinyxml2::XMLElement* element);

    //-------------------------------------------------------------------------
    //! @brief      リサイズします.
    //-------------------------------------------------------------------------
    void Resize(uint32_t count);

    //-------------------------------------------------------------------------
    //! @brief      マテリアル数を取得します.
    //-------------------------------------------------------------------------
    uint32_t GetCount() const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //-------------------------------------------------------------------------
    EditorMaterial& GetMaterial(uint32_t index);

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを検索します.
    //-------------------------------------------------------------------------
    bool FindMaterial(const std::string& name, EditorMaterial& material);

    ////-------------------------------------------------------------------------
    ////! @brief      エクスポートコンテキストを生成します.
    ////-------------------------------------------------------------------------
    //ExportContext* CreateExportContext();

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    std::vector<EditorMaterial>  m_Materials;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};