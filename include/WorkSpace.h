//-----------------------------------------------------------------------------
// File : WorkSpace.h
// Desc : WorkSpace File.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <EditorMaterial.h>
#include <EditorModel.h>


///////////////////////////////////////////////////////////////////////////////
// WorkSpace class
///////////////////////////////////////////////////////////////////////////////
class WorkSpace
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    WorkSpace();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~WorkSpace();

    //-------------------------------------------------------------------------
    //! @brief      ワークスペースを新規作成します.
    //-------------------------------------------------------------------------
    bool New(const char* modelPath);

    //-------------------------------------------------------------------------
    //! @brief      読み込みを行います.
    //-------------------------------------------------------------------------
    bool Load(const char* path);

    //-------------------------------------------------------------------------
    //! @brief      非同期読み込みを行います.
    //-------------------------------------------------------------------------
    bool LoadAsync(const char* path);

    //-------------------------------------------------------------------------
    //! @brief      名前を付けて保存を行います.
    //-------------------------------------------------------------------------
    bool SaveAs(const char* path);

    //-------------------------------------------------------------------------
    //! @brief      上書き保存を行います.
    //-------------------------------------------------------------------------
    bool Save();

    //-------------------------------------------------------------------------
    //! @brief      データを破棄します.
    //-------------------------------------------------------------------------
    void Clear();

    //-------------------------------------------------------------------------
    //! @brief      モデルを取得します.
    //-------------------------------------------------------------------------
    EditorModel* GetModel() const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //-------------------------------------------------------------------------
    EditorMaterials* GetMaterials() const;

    //-------------------------------------------------------------------------
    //! @brief      ローディング中かどうか?
    //-------------------------------------------------------------------------
    bool IsLoading() const;

    //-------------------------------------------------------------------------
    //! @brief      出力パスを設定します.
    //-------------------------------------------------------------------------
    void SetOutputPath(const char* path);

    //-------------------------------------------------------------------------
    //! @brief      出力パスをフルパスで取得します.
    //-------------------------------------------------------------------------
    std::string GetOutputPath() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    std::atomic<bool>   m_Loading       = {};
    EditorModel*        m_Model         = nullptr;
    EditorMaterials*    m_Materials     = nullptr;
    std::string         m_Path;             // ワークスペースファイルのパス.
    std::string         m_WorkDir;          // ワークファイルがあるディレクトリ(フルパス).
    std::string         m_ModelPath;        // 相対パス.
    std::string         m_OutputPath;       // 相対パス.

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};