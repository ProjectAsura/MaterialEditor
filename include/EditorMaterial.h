//-----------------------------------------------------------------------------
// File : EditorMaterial.h
// Desc : Material For Editor.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <d3d11.h>
#include <d3d11shader.h>
#include <tinyxml2.h>
#include <string>
#include <vector>
#include <map>
#include <asdxRef.h>
#include <asdxEditParam.h>
#include <PluginMgr.h>
#include <imgui.h>
#include <ExportContext.h>


//-----------------------------------------------------------------------------
//      エクスポートコンテキストを破棄します.
//-----------------------------------------------------------------------------
void DisposeExportContext(MaterialEditor::ExportContext*& pContext);


///////////////////////////////////////////////////////////////////////////////
// EditorMaterial
///////////////////////////////////////////////////////////////////////////////
class EditorMaterial
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    EditorMaterial();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~EditorMaterial();

    //-------------------------------------------------------------------------
    //! @brief      シリアライズします.
    //-------------------------------------------------------------------------
    tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc);

    //-------------------------------------------------------------------------
    //! @brief      デシリアライズします.
    //-------------------------------------------------------------------------
    void Deserialize(tinyxml2::XMLElement* element);

    //-------------------------------------------------------------------------
    //! @brief      マテリアルシェーダを適用します.
    //-------------------------------------------------------------------------
    const PluginShader* Bind(ID3D11DeviceContext* pContext, bool lightingPass);

    //-------------------------------------------------------------------------
    //! @brief      マテリアルシェーダの適用を解除します.
    //-------------------------------------------------------------------------
    void Unbind(ID3D11DeviceContext* pContext, const PluginShader* shader);

    //-------------------------------------------------------------------------
    //! @brief      編集処理を行います.
    //-------------------------------------------------------------------------
    void Edit(const std::string& filterType);

    //-------------------------------------------------------------------------
    //! @brief      マテリアル名を設定します.
    //-------------------------------------------------------------------------
    void SetName(const std::string& name);

    //-------------------------------------------------------------------------
    //! @brief      マテリアル名を取得します.
    //-------------------------------------------------------------------------
    const std::string& GetName() const;

    //-------------------------------------------------------------------------
    //! @brief      シャドウキャストフラグを取得します.
    //-------------------------------------------------------------------------
    bool CastShadow() const;

    //-------------------------------------------------------------------------
    //! @brief      ブレンドステートを取得します.
    //-------------------------------------------------------------------------
    int GetBlendState() const;

    //-------------------------------------------------------------------------
    //! @brief      エクスポートデータを生成します.
    //-------------------------------------------------------------------------
    void CreateExportData(MaterialEditor::MaterialData* dst);

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    std::string                                 m_Name;
    std::string                                 m_SelectedMaterial;
    std::map<std::string, MaterialInstance*>    m_Instances;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// EditorMaterials class
///////////////////////////////////////////////////////////////////////////////
class EditorMaterials
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    ImGuiTextFilter     NameFilter;         // 名前フィルタ.
    std::string         TypeFilter = "";    // マテリアルタイプフィルタ.

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    EditorMaterials();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~EditorMaterials();

    //-------------------------------------------------------------------------
    //! @brief      シリアライズします.
    //-------------------------------------------------------------------------
    tinyxml2::XMLElement* Serialize(tinyxml2::XMLDocument* doc);

    //-------------------------------------------------------------------------
    //! @brief      デシリアライズします.
    //-------------------------------------------------------------------------
    void Deserialize(tinyxml2::XMLElement* element);

    //-------------------------------------------------------------------------
    //! @brief      リサイズします.
    //-------------------------------------------------------------------------
    void Resize(uint32_t count);

    //-------------------------------------------------------------------------
    //! @brief      マテリアル数を取得します.
    //-------------------------------------------------------------------------
    uint32_t GetCount() const;

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを取得します.
    //-------------------------------------------------------------------------
    EditorMaterial& GetMaterial(uint32_t index);

    //-------------------------------------------------------------------------
    //! @brief      マテリアルを検索します.
    //-------------------------------------------------------------------------
    bool FindMaterial(const std::string& name, EditorMaterial& material);

    //-------------------------------------------------------------------------
    //! @brief      エクスポートコンテキストを生成します.
    //-------------------------------------------------------------------------
    MaterialEditor::ExportContext* CreateExportContext();

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    std::vector<EditorMaterial>  m_Materials;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};