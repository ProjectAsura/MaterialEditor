//-----------------------------------------------------------------------------
// File : PluginMgr.h
// Desc : Plugin Manager.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes.
//-----------------------------------------------------------------------------
#include <string>
#include <vector>
#include <map>
#include <d3d11.h>
#include <d3d11shader.h>
#include <tinyxml2.h>
#include <asdxRef.h>
#include <asdxEditParam.h>
#include <asdxDisposer.h>
#include <ExportContext.h>
#include <FxParser.h>


///////////////////////////////////////////////////////////////////////////////
// DEFAULT_TEXTURE_TYPE enum
///////////////////////////////////////////////////////////////////////////////
enum DEFAULT_TEXTURE_TYPE
{
    DEFAULT_TEXTURE_CHECKER_BOARD   = 0,    // 市松模様.
    DEFAULT_TEXTURE_WHITE           = 1,    // 白.
    DEFAULT_TEXTURE_BLACK           = 2,    // 黒.
    DEFAULT_TEXTURE_NORMAL          = 3,    // 法線.
    DEFAULT_TEXTURE_MRO             = 4,    // MRO
    DEFAULT_TEXTURE_VELCOITY        = 5,    // 速度.
    DEFAULT_TEXTURE_ORM             = 6,    // ORM
    DEFAULT_TEXTURE_RED             = 7,    // 赤.
    DEFAULT_TEXTURE_GREEN           = 8,    // 緑.
    DEFAULT_TEXTURE_BLUE            = 9,    // 青.
    DEFAULT_TEXTURE_GRAY            = 10,   // 灰色.

    DEFAULT_TEXTURE_COUNT
};

///////////////////////////////////////////////////////////////////////////////
// CONVERTER_TYPE enum
///////////////////////////////////////////////////////////////////////////////
enum CONVERTER_TYPE
{
    CONVERTER_NONE    = 0,    // 変換無し.
    CONVERTER_RADIAN  = 1,    // ラジアンに変換.
    CONVERTER_DEGREE  = 2,    // 度に変換.
};

//-----------------------------------------------------------------------------
//! @brief      エクスポーターを呼び出し，エクスポート処理を実行します.
//!
//! @param[in]      dllname     DLLファイルパス.
//! @param[in]      context     エクスポートコンテキスト.
//! @retval true    エクスポート成功.
//! @retval false   エクスポート失敗.
//-----------------------------------------------------------------------------
bool CallExporter(const char* dllname, const ExportContext* context);

//-----------------------------------------------------------------------------
//! @brief      デフォルトテクスチャタイプを解析します.
//-----------------------------------------------------------------------------
DEFAULT_TEXTURE_TYPE ParseDefaultTextureType(const char* text);


///////////////////////////////////////////////////////////////////////////////
// PluginShader class
///////////////////////////////////////////////////////////////////////////////
class PluginShader
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    ///////////////////////////////////////////////////////////////////////////
    // MemberInfo structure
    ///////////////////////////////////////////////////////////////////////////
    struct MemberInfo
    {
        uint32_t    Offset  = 0;
        uint32_t    Size    = 0;
    };

    ///////////////////////////////////////////////////////////////////////////
    // BufferInfo structure
    ///////////////////////////////////////////////////////////////////////////
    struct BufferInfo
    {
        uint32_t                            BufferSize = 0;
        std::map<std::string, MemberInfo>   MemberTable;

        BufferInfo()
        { /* DO_NOTHING */ }

        ~BufferInfo()
        { MemberTable.clear(); }
    };

    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    PluginShader();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~PluginShader();

    //-------------------------------------------------------------------------
    //! @brief      コンパイルします.
    //-------------------------------------------------------------------------
    bool Compile(const char* sourceCode, size_t size, const char* entryPoint);

    //-------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      シェーダを設定します.
    //-------------------------------------------------------------------------
    void Bind(ID3D11DeviceContext* pContext) const;

    //-------------------------------------------------------------------------
    //! @brief      シェーダの設定を解除します.
    //-------------------------------------------------------------------------
    void Unbind(ID3D11DeviceContext* pContext) const;

    //-------------------------------------------------------------------------
    //! @brief      定数バッファを設定します.
    //-------------------------------------------------------------------------
    void SetCBV(
        ID3D11DeviceContext*    pContext,
        const char*             name,
        ID3D11Buffer*           pCB) const;

    //-------------------------------------------------------------------------
    //! @brief      テクスチャを設定します.
    //-------------------------------------------------------------------------
    void SetSRV(
        ID3D11DeviceContext*        pContext,
        const char*                 name,
        ID3D11ShaderResourceView*   pSRV) const;

    //-------------------------------------------------------------------------
    //! @brief      定数バッファのレジスタテーブルを取得します.
    //-------------------------------------------------------------------------
    const std::map<std::string, uint8_t>& GetTableCBV() const;

    //-------------------------------------------------------------------------
    //! @brief      シェーダリソースビューのレジスタテーブルを取得します.
    //-------------------------------------------------------------------------
    const std::map<std::string, uint8_t>& GetTableSRV() const;

    //-------------------------------------------------------------------------
    //! @brief      アンオーダードアクセスビューのレジスタテーブルを取得します.
    //-------------------------------------------------------------------------
    const std::map<std::string, uint8_t>& GetTableUAV() const;

    //-------------------------------------------------------------------------
    //! @brief      定数バッファ情報を取得します.
    //-------------------------------------------------------------------------
    const std::map<std::string, BufferInfo>& GetBufferInfo() const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    asdx::RefPtr<ID3D11PixelShader>         m_PS;
    std::map<std::string, uint8_t>          m_TableCBV;
    std::map<std::string, uint8_t>          m_TableSRV;
    std::map<std::string, uint8_t>          m_TableUAV;
    std::map<std::string, BufferInfo>       m_BufferInfo;
    std::string                             m_EntryPoint;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////
// PluginMaterial class
///////////////////////////////////////////////////////////////////////////////
class PluginMaterial
{
    //=========================================================================
    // friend of classes and methods.
    //=========================================================================
    friend class PluginMgr;
    friend class EditorMaterial;

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    PluginMaterial();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~PluginMaterial();

    //-------------------------------------------------------------------------
    //! @brief      名前を取得します.
    //-------------------------------------------------------------------------
    const std::string& GetName() const;

    //-------------------------------------------------------------------------
    //! @brief      ロードします.
    //-------------------------------------------------------------------------
    bool Load(const char* path);

    //-------------------------------------------------------------------------
    //! @brief      シェーダをリロードします.
    //-------------------------------------------------------------------------
    bool ReloadShader();

    //-------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      シェーダを設定します.
    //-------------------------------------------------------------------------
    void Bind(ID3D11DeviceContext* pContext, bool lightingPass = true);

    //-------------------------------------------------------------------------
    //! @brief      シェーダ設定を解除します.
    //-------------------------------------------------------------------------
    void Unbind(ID3D11DeviceContext* pContext, bool lightingPass = true);

    //-------------------------------------------------------------------------
    //! @brief      ライティングシェーダを取得します.
    //-------------------------------------------------------------------------
    const PluginShader* GetLightingShader() const;

    //-------------------------------------------------------------------------
    //! @brief      シャドウイングシェーダを取得します.
    //-------------------------------------------------------------------------
    const PluginShader* GetShadowingShader() const;

    //-------------------------------------------------------------------------
    //! @brief      プロパティを取得します.
    //-------------------------------------------------------------------------
    const asura::Properties& GetProperties() const;

    //-------------------------------------------------------------------------
    //! @brief      メモリマッピングを行います.
    //-------------------------------------------------------------------------
    void* Map(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      メモリマッピングを解除します.
    //-------------------------------------------------------------------------
    void Unmap(ID3D11DeviceContext* pContext);

    //-------------------------------------------------------------------------
    //! @brief      バッファスロット番号を取得します.
    //-------------------------------------------------------------------------
    bool FindSlotCBV(const std::string& name, uint32_t& slot, bool lightingPass = true) const;

    //-------------------------------------------------------------------------
    //! @brief      テクスチャスロット番号を取得します.
    //-------------------------------------------------------------------------
    bool FindSlotSRV(const std::string& name, uint32_t& slot, bool lightingPass = true) const;

    //-------------------------------------------------------------------------
    //! @brief      アンオーダードアクセスビュースロット番号を取得します.
    //-------------------------------------------------------------------------
    bool FindSlotUAV(const std::string& name, uint32_t& slot, bool lightingPass = true) const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    std::string                     m_Name;
    std::string                     m_ShaderPath;
    PluginShader                    m_LightingShader;
    PluginShader                    m_ShadowingShader;
    asura::Properties               m_Properties;
    asdx::RefPtr<ID3D11Buffer>      m_EditableCB;

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

///////////////////////////////////////////////////////////////////////////////
// PluginMgr class
///////////////////////////////////////////////////////////////////////////////
class PluginMgr
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      シングルトンインスタンスを取得します.
    //-------------------------------------------------------------------------
    static PluginMgr& Instance();

    //-------------------------------------------------------------------------
    //! @brief      ロードします.
    //-------------------------------------------------------------------------
    bool Load();

    //-------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      シェーダをリロードします.
    //-------------------------------------------------------------------------
    void ReloadShader();

    //-------------------------------------------------------------------------
    //! @brief      エクスポーターをリロードします.
    //-------------------------------------------------------------------------
    void ReloadExporter();

    //-------------------------------------------------------------------------
    //! @brief      マスターマテリアルを検索します.
    //-------------------------------------------------------------------------
    bool FindMasterMaterial(const std::string& name, PluginMaterial** result);

    //-------------------------------------------------------------------------
    //! @brief      コンボボックスを描画します.
    //-------------------------------------------------------------------------
    const std::string& DrawTypeCombo(const std::string& selected);

    //-------------------------------------------------------------------------
    //! @brief      タイプフィルタコンボボックスを描画します.
    //-------------------------------------------------------------------------
    const std::string& DrawFilterCombo(const std::string& selected);

    //-------------------------------------------------------------------------
    //! @brief      エクスポーターコンボボックスを描画します.
    //-------------------------------------------------------------------------
    const std::string& DrawExporterCombo(const std::string& selected);

    //-------------------------------------------------------------------------
    //! @brief      デフォルトテクスチャを取得します.
    //-------------------------------------------------------------------------
    ID3D11ShaderResourceView* GetDefaultSRV(DEFAULT_TEXTURE_TYPE type) const;

    //-------------------------------------------------------------------------
    //! @brief      シェーダを破棄します.
    //-------------------------------------------------------------------------
    void DisposeShader(ID3D11PixelShader*& pItem);

    //-------------------------------------------------------------------------
    //! @brief      バッファを破棄します.
    //-------------------------------------------------------------------------
    void DisposeBuffer(ID3D11Buffer*& pItem);

    //-------------------------------------------------------------------------
    //! @brief      同期タイミングを設定します.
    //-------------------------------------------------------------------------
    void Sync();

    //-------------------------------------------------------------------------
    //! @brief      最初のマスターマテリアル名を取得します.
    //-------------------------------------------------------------------------
    const std::string& GetFirstMasterMaterialName() const;

    //-------------------------------------------------------------------------
    //! @brief      マスターマテリアルを保持するかチェックします.
    //-------------------------------------------------------------------------
    bool ContainMasterMaterial(const std::string& name) const;

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    static PluginMgr                            s_Instance;
    std::map<std::string, PluginMaterial*>      m_MasterMaterials;                          //!< 定義のみ実データは持たない.
    asdx::RefPtr<ID3D11ShaderResourceView>      m_DefaultSRV[DEFAULT_TEXTURE_COUNT];        //!< デフォルトテクスチャ.
    asdx::Disposer<ID3D11PixelShader>           m_ShaderDisposer;                           //!< シェーダ遅延解放用.
    asdx::Disposer<ID3D11Buffer>                m_BufferDisposer;                           //!< バッファ遅延解放用.
    std::vector<std::string>                    m_Exporters;                                //!< プラグインエクスポーターパス.

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};